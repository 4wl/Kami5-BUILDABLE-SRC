package tech.mmmax.kami.impl.features.modules.misc;

import java.util.Iterator;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityBoat;
import net.minecraft.init.Items;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketSteerBoat;
import net.minecraft.network.play.client.CPacketPlayer.Position;
import net.minecraft.network.play.server.SPacketEntityTeleport;
import net.minecraft.network.play.server.SPacketEntityVelocity;
import net.minecraft.network.play.server.SPacketMaps;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.world.storage.MapData;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent.ClientTickEvent;
import tech.mmmax.kami.api.event.PacketEvent;
import tech.mmmax.kami.api.feature.Feature;
import tech.mmmax.kami.api.feature.module.Module;
import tech.mmmax.kami.api.utils.NullUtils;
import tech.mmmax.kami.api.utils.chat.ChatMessage;
import tech.mmmax.kami.api.utils.chat.ChatUtils;
import tech.mmmax.kami.api.value.Value;
import tech.mmmax.kami.api.value.builder.ValueBuilder;
import tech.mmmax.kami.mixin.mixins.access.IEntity;

public class ChunkCoordExploit extends Module {

    Value mode = (new ValueBuilder()).withDescriptor("Mode").withValue("Leaked").withModes(new String[] { "Leaked", "Test"}).register(this);
    Value packetsPerTick = (new ValueBuilder()).withDescriptor("Packet Count").withValue(Integer.valueOf(2)).withRange(Integer.valueOf(0), Integer.valueOf(10)).register(this);

    public ChunkCoordExploit() {
        super("CoordExploit", Feature.Category.Misc);
    }

    @SubscribeEvent
    public void onClientTick(ClientTickEvent event) {
        if (!NullUtils.nullCheck()) {
            if (((String) this.mode.getValue()).equals("Leaked")) {
                if (((IEntity) ChunkCoordExploit.mc.player).isInPortal() && ChunkCoordExploit.mc.player.getRidingEntity() instanceof EntityBoat) {
                    if (ChunkCoordExploit.mc.player.inventory.getCurrentItem().getItem().equals(Items.MAP)) {
                        ChunkCoordExploit.mc.player.connection.sendPacket(new CPacketPlayerTryUseItemOnBlock(ChunkCoordExploit.mc.player.getPosition(), EnumFacing.UP, EnumHand.MAIN_HAND, 0.0F, -1337.77F, 0.0F));
                    }

                    for (int i = 0; i < ((Number) this.packetsPerTick.getValue()).intValue(); ++i) {
                        ChunkCoordExploit.mc.player.connection.sendPacket(new Position(ChunkCoordExploit.mc.player.posX, -1337.77D, ChunkCoordExploit.mc.player.posZ, false));
                        ChunkCoordExploit.mc.player.connection.sendPacket(new CPacketSteerBoat(false, true));
                    }
                }

                Iterator iterator = ChunkCoordExploit.mc.world.playerEntities.iterator();

                while (iterator.hasNext()) {
                    Entity entity = (Entity) iterator.next();

                    if (!entity.getName().equalsIgnoreCase(ChunkCoordExploit.mc.player.getName())) {
                        ChatUtils.sendMessage(new ChatMessage("Found a player at: " + entity.getPosition(), false, 0));
                    }
                }
            }

        }
    }

    @SubscribeEvent
    public void onPacket(PacketEvent event) {
        if (event.getPacket() instanceof CPacketConfirmTeleport || event.getPacket() instanceof CPacketPlayerTryUseItem) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketMaps) {
            ((SPacketMaps) event.getPacket()).setMapdataTo(new MapData("haha i get ur coords"));
        }

        if (event.getPacket() instanceof SPacketEntityVelocity || event.getPacket() instanceof SPacketEntityTeleport) {
            event.setCanceled(true);
        }

    }
}
